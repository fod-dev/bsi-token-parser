plugins {
    id 'org.jetbrains.dokka' version '1.4.30'
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'maven-publish'
}

group 'com.fortify.fod'
version '1.2.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
	jcenter() // Currently required for dokkaJavadoc task, see for example https://github.com/detekt/detekt/issues/3461
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'com.beust:klaxon:5.5'

    testCompile "org.jetbrains.spek:spek-api:1.1.5"
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: '1.4.32'
    testCompile "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"
    testCompile "org.junit.jupiter:junit-jupiter-engine:5.3.2"
	testCompile "org.jetbrains.kotlin:kotlin-reflect:1.4.32"
	testRuntime ('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
}

test {
    useJUnitPlatform {
        includeEngines 'spek'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {

                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/BSITokenParser-${version}.pom")
    }
}

def javadocDir = "$buildDir/libs/javadoc"

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task deleteJavadocFolder(type: Delete) {
    delete javadocDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task prepareMavenDeployables(type: GradleBuild) {
    tasks = ['clean', 'build', 'test', 'generatePomFileForMavenPublication', 'javadocJar', 'deleteJavadocFolder', 'sourcesJar']
}

defaultTasks 'clean', 'build', 'test'
