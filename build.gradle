group 'com.fortify.fod'
version '1.0.1-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.spek:spek-api:1.1.5"
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: '1.1.2'
    testCompile "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"
}

buildscript {
    ext.kotlin_version = '1.1.51'
    ext.dokka_version = '0.9.15'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {

                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/BSITokenParser-${version}.pom")
    }
}

def javadocDir = "$buildDir/libs/javadoc"

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadocDir
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task deleteJavadocFolder(type: Delete) {
    delete javadocDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task prepareMavenDeployables(type: GradleBuild) {
    tasks = ['clean', 'build', 'test', 'generatePomFileForMavenPublication', 'javadocJar', 'deleteJavadocFolder', 'sourcesJar']
}

defaultTasks 'clean', 'build', 'test'

