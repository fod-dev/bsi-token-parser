plugins {
    id 'org.jetbrains.dokka' version '1.4.32'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

group 'com.fortify.fod'
version '1.2.0'
description 'Fortify BSI Token Parser library'

sourceCompatibility = 1.8

ext {
    kotlin_version = "1.3.70"
    spek_version = "2.0.10"
}

repositories {
    mavenCentral()
    jcenter() // Currently required for dokkaJavadoc task, see for example https://github.com/detekt/detekt/issues/3461
}

dependencies {
    compile "org.apache.httpcomponents:httpclient:4.5.3"
    compile "com.beust:klaxon:5.4"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // assertion
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    //spek2
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def javadocDir = "$buildDir/libs/javadoc"

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task deleteJavadocFolder(type: Delete) {
    delete javadocDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(sourcesJar) {
        type 'source'
    }
    archives(javadocJar) {
        type 'javadoc'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                groupId = project.group
                artifactId = project.name
                name = project.name
                version = project.version
                description = project.description
                url = 'https://github.com/fortify/bsi-token-parser-kt'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'fortify'
                        name = 'Fortify'
                        email = 'fortify-oss@fortify.com'
                        organization = 'Micro Focus Fortify'
                        organizationUrl = 'https://www.microfocus.com/en-us/cyberres/application-security'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/fortify/bsi-token-parser-kt.git"
                    developerConnection = "scm:git:https://github.com/fortify/bsi-token-parser-kt.git"
                    url = "https://github.com/fortify/bsi-token-parser-kt"
                }
            }
        }
    }
}

// Sign using signingKey and signingPassword properties
signing {
	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	required { gradle.taskGraph.hasTask("publishToOSSRH") }
	sign publishing.publications.maven
}

// Publish using OSSRHUsername and OSSRHPassword properties
nexusPublishing {
	repositories {
		OSSRH {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		}
	}
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/BSITokenParser-${version}.pom")
    }
}

task prepareMavenDeployables(type: GradleBuild) {
    tasks = ['clean', 'build', 'test', 'generatePomFileForMavenPublication', 'javadocJar', 'deleteJavadocFolder', 'sourcesJar']
}

defaultTasks 'clean', 'build', 'test'
